# -*- coding: utf-8 -*-
"""khanhsmai.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DdUXI7X6MVa8R3wAHCIlughWzEG52Vxo
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import tensorflow as tf
from tensorflow import keras

import os
import tempfile

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

import sklearn
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

mpl.rcParams['figure.figsize'] = (12,10)
colors = plt.rcParams['axes.prop_cycle'].by_key()['color']

train_df = pd.read_csv(r'../input/protonx-tf03-phat-hien-gian-lan-the-tin-dung/train-dataset.csv') # đọc dữ liệu train. đây là bộ dữ liệu để tạo mô hình dự đoán.
test_df = pd.read_csv(r'../input/protonx-tf03-phat-hien-gian-lan-the-tin-dung/test-dataset.csv') # đọc dữ liệu test. đây là bộ dữ liệu để dự đoán kết quả và nộp bài.

train_df.head()

train_df['Class'].value_counts()

Y = train_df['Class']
X = train_df.drop(['ID','Class','Time'],axis = 1)

eps = 0.001
X['Log Amount'] = np.log(X.pop('Amount')+eps)

X_train, X_val, y_train, y_val = train_test_split(X,Y, test_size = 0.1, random_state = 42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)

X_val = scaler.transform(X_val)

METRICS = [
    keras.metrics.AUC(name='auc'),
]

model = keras.Sequential([
    keras.layers.Dense(
        16,activation='relu', 
        input_shape = (X_train.shape[-1],)),
    
    keras.layers.Dropout(0.5),
    
    
    keras.layers.Dense(1,activation='sigmoid'),
    
])

model.compile(
    optimizer = keras.optimizers.Adam(lr=1e-3),
    loss = keras.losses.BinaryCrossentropy(),
    metrics = METRICS
)

EPOCHS = 10
BATCH_SIZE = 2048

early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor = 'val_auc',
    verbose = 1,
    patience = 10,
    mode = 'max',
    restore_best_weights = True
)

history = model.fit(
    X_train,
    y_train,
    batch_size = BATCH_SIZE,
    epochs = 20,
    validation_data = (X_val,y_val),
    verbose = 1
)

def plot_roc(name, labels, predictions, **kwargs):
    fp, tp, _ = sklearn.metrics.roc_curve(labels, predictions)
    
    plt.plot(100*fp, 100*tp, label = name, linewidth = 2, **kwargs)
    plt.xlabel('False positives [%]')
    plt.ylabel('True positives [%]')
    plt.xlim([-0.5,20])
    plt.ylim([80,100.5])
    plt.grid(True)
    ax = plt.gca()
    ax.set_aspect('equal')

plot_roc('Train', y_train, model.predict(X_train))
plot_roc('Validation', y_val, model.predict(X_val))

plt.legend(loc = 'lower right')

y_test = test_df['Class']
X_test = test_df.drop(['ID','Class','Time'],axis = 1)
eps = 0.001
X_test['Log_Amount'] = np.log(X_test.pop('Amount')+eps)

X_test = scaler.transform(X_test)

y_pred = model.predict(X_test)
y_pred = tf.cast(y_pred >= 0.5, tf.int32)

submissionDataset = pd.read_csv('../input/protonx-tf03-phat-hien-gian-lan-the-tin-dung/sample_submission.csv')
submissionDataset['Class'] = y_pred.numpy()
submissionDataset.to_csv('./submision.csv',index = False)